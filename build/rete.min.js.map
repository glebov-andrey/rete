{"version":3,"file":"rete.min.js","sources":["../src/engine/component.ts","../src/node.ts","../src/component.ts","../src/connection.ts","../src/control.ts","../src/core/emitter.ts","../src/io.ts","../src/input.ts","../src/core/validator.ts","../src/core/context.ts","../src/view/utils.ts","../src/core/events.ts","../src/view/drag.ts","../src/view/zoom.ts","../src/view/area.ts","../src/view/connection.ts","../src/view/control.ts","../src/view/socket.ts","../src/view/node.ts","../src/view/index.ts","../src/selected.ts","../src/events.ts","../src/editor.ts","../src/output.ts","../src/socket.ts","../src/engine/recursion.ts","../src/engine/state.ts","../src/engine/events.ts","../src/engine/index.ts","../src/index.ts"],"sourcesContent":["import { Engine } from './index';\r\nimport { NodeData, WorkerInputs, WorkerOutputs } from '../core/data';\r\n\r\nexport abstract class Component {\r\n\r\n    name: string;\r\n    data: unknown = {};\r\n    engine: Engine | null = null;\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n    }\r\n\r\n    abstract worker(node: NodeData, inputs: WorkerInputs, outputs: WorkerOutputs, ...args: unknown[]): void;\r\n}","import { Connection } from './connection';\r\nimport { Control } from './control';\r\nimport { Input } from './input';\r\nimport { Output } from './output';\r\nimport { InputsData, NodeData, OutputsData } from './core/data';\r\n\r\nexport class Node {\r\n\r\n    name: string;\r\n    id: number;\r\n    position: [number, number] = [0.0, 0.0];\r\n    inputs = new Map<string, Input>();\r\n    outputs = new Map<string, Output>();\r\n    controls = new Map<string, Control>();\r\n    data: {[key: string]: unknown} = {};\r\n    meta: {[key: string]: unknown} = {};\r\n\r\n    static latestId = 0;\r\n    \r\n    constructor(name: string) {\r\n        this.name = name;\r\n        this.id = Node.incrementId();\r\n    }\r\n\r\n    _add<T extends any>(list: Map<string, T>, item: T, prop: string) {\r\n        if (list.has(item.key))\r\n            throw new Error(`Item with key '${item.key}' already been added to the node`);\r\n        if (item[prop] !== null)\r\n            throw new Error('Item has already been added to some node');\r\n        \r\n        item[prop] = this;\r\n        list.set(item.key, item);\r\n    }\r\n\r\n    addControl(control: Control) {\r\n        this._add(this.controls, control, 'parent');\r\n        return this;\r\n    }\r\n\r\n    removeControl(control: Control) {\r\n        control.parent = null;\r\n\r\n        this.controls.delete(control.key);\r\n    }\r\n\r\n    addInput(input: Input) {\r\n        this._add(this.inputs, input, 'node');\r\n        return this;\r\n    }\r\n\r\n    removeInput(input: Input) {\r\n        input.removeConnections();\r\n        input.node = null;\r\n\r\n        this.inputs.delete(input.key);\r\n    }\r\n\r\n    addOutput(output: Output) {\r\n        this._add(this.outputs, output, 'node');\r\n        return this;\r\n    }\r\n\r\n    removeOutput(output: Output) {\r\n        output.removeConnections();\r\n        output.node = null;\r\n\r\n        this.outputs.delete(output.key);\r\n    }\r\n\r\n    getConnections() {\r\n        const ios = [...this.inputs.values(), ...this.outputs.values()];\r\n        const connections = ios.reduce((arr, io) => {\r\n            return [...arr, ...io.connections];\r\n        }, [] as Connection[]);\r\n\r\n        return connections;\r\n    }\r\n\r\n    update() {}\r\n\r\n    static incrementId() {\r\n        if (!this.latestId)\r\n            this.latestId = 1\r\n        else\r\n            this.latestId++\r\n        return this.latestId\r\n    }\r\n\r\n    static resetId() {\r\n        this.latestId = 0;\r\n    }\r\n\r\n    toJSON(): NodeData {\r\n        const reduceIO = <T extends any>(list: Map<string, Input | Output>) => {\r\n            return Array.from(list).reduce<T>((obj, [key, io]) => {\r\n                obj[key] = io.toJSON();\r\n                return obj;\r\n            }, {} as any)\r\n        }\r\n\r\n        return {\r\n            'id': this.id,\r\n            'data': this.data,\r\n            'inputs': reduceIO<InputsData>(this.inputs),\r\n            'outputs': reduceIO<OutputsData>(this.outputs),\r\n            'position': this.position,\r\n            'name': this.name\r\n        }\r\n    }\r\n\r\n    static fromJSON(json: NodeData) {\r\n        const node = new Node(json.name);\r\n        const [x, y] = json.position;\r\n\r\n        node.id = json.id;\r\n        node.data = json.data;\r\n        node.position = [x, y];\r\n        node.name = json.name;\r\n        Node.latestId = Math.max(node.id, Node.latestId);\r\n\r\n        return node;\r\n    }\r\n}\r\n","import { Component as ComponentWorker } from './engine/component';\r\nimport { Node } from './node';\r\nimport { NodeEditor } from './editor';\r\n\r\nexport abstract class Component extends ComponentWorker {\r\n\r\n    editor: NodeEditor | null = null;\r\n    data: unknown = {};\r\n\r\n    constructor(name: string) {\r\n        super(name);\r\n    }\r\n\r\n    abstract async builder(node: Node): Promise<void>;\r\n\r\n    async build(node: Node) {\r\n        await this.builder(node);\r\n\r\n        return node;\r\n    }\r\n\r\n    async createNode(data = {}) {\r\n        const node = new Node(this.name);\r\n        \r\n        node.data = data;\r\n        await this.build(node);\r\n\r\n        return node;\r\n    }\r\n}","import { Input } from './input';\r\nimport { Output } from './output';\r\n\r\nexport class Connection {\r\n\r\n    output: Output;\r\n    input: Input;\r\n    data: unknown = {};\r\n\r\n    constructor(output: Output, input: Input) {\r\n        this.output = output;\r\n        this.input = input;\r\n        this.data = {};\r\n\r\n        this.input.addConnection(this);\r\n    }\r\n\r\n    remove() {\r\n        this.input.removeConnection(this);\r\n        this.output.removeConnection(this);\r\n    }\r\n}","import { Input } from './input';\r\nimport { Node } from './node';\r\n\r\nexport class Control {\r\n\r\n    key: string;\r\n    data: unknown = {};\r\n    parent: Node | Input | null = null;\r\n\r\n    constructor(key: string) {\r\n        if (this.constructor === Control)\r\n            throw new TypeError('Can not construct abstract class');\r\n        if (!key)\r\n            throw new Error('The key parameter is missing in super() of Control ');\r\n\r\n        this.key = key;\r\n    }\r\n\r\n    getNode() {\r\n        if (this.parent === null)\r\n            throw new Error('Control isn\\'t added to Node/Input');   \r\n        \r\n        if (this.parent instanceof Node)\r\n            return this.parent;\r\n            \r\n        if (!this.parent.node)\r\n            throw new Error('Control hasn\\'t be added to Input or Node');\r\n\r\n        return this.parent.node;\r\n    }\r\n\r\n    getData(key: string) {\r\n        return this.getNode().data[key];\r\n    }\r\n\r\n    putData(key: string, data: unknown) {\r\n        this.getNode().data[key] = data;\r\n    }  \r\n}","import { Events } from './events';\r\n\r\nexport class Emitter<EventTypes> {\r\n\r\n    events: {[key: string]: Function[]} = {};\r\n    silent = false;\r\n\r\n    constructor(events: Events | Emitter<EventTypes>) {\r\n        this.events = events instanceof Emitter ? events.events : events.handlers;\r\n    }\r\n\r\n    on<K extends keyof EventTypes>(names: K | K[], handler: (args: EventTypes[K]) => void | unknown): this {\r\n        const events = names instanceof Array ? names : (names as string).split(' ');\r\n\r\n        (events as string[]).forEach(name => {\r\n            if (!this.events[name])\r\n                throw new Error(`The event ${name} does not exist`);\r\n            this.events[name].push(handler);\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    trigger<K extends keyof EventTypes>(name: K, params: EventTypes[K] | {} = {}) {\r\n        if (!(name in this.events))\r\n            throw new Error(`The event ${name} cannot be triggered`);\r\n\r\n        return this.events[name as string].reduce((r: boolean, e: Function) => {\r\n            return (e(params) !== false) && r\r\n        }, true); // return false if at least one event is false        \r\n    }\r\n\r\n    bind(name: string) {\r\n        if (this.events[name])\r\n            throw new Error(`The event ${name} is already bound`);\r\n\r\n        this.events[name] = [];\r\n    }\r\n\r\n    exist(name: string) {\r\n        return Array.isArray(this.events[name]);\r\n    }\r\n}","import { Connection } from './connection';\r\nimport { Node } from './node';\r\nimport { Socket } from './socket';\r\n\r\nexport class IO {\r\n\r\n    node: Node | null = null;\r\n    multipleConnections: boolean;\r\n    connections: Connection[] = [];\r\n   \r\n    key: string;\r\n    name: string;\r\n    socket: Socket;\r\n\r\n    constructor(key: string, name: string, socket: Socket, multiConns: boolean) {\r\n\t    this.node = null;\r\n        this.multipleConnections = multiConns;\r\n        this.connections = [];\r\n\t   \r\n        this.key = key;\r\n        this.name = name;\r\n        this.socket = socket;\r\n    }\r\n    \r\n    removeConnection(connection: Connection) {\r\n        this.connections.splice(this.connections.indexOf(connection), 1);\r\n    }\r\n\r\n    removeConnections() {\r\n        this.connections.forEach(connection => this.removeConnection(connection));\r\n    }\r\n}","import { Connection } from './connection';\r\nimport { Control } from './control';\r\nimport { IO } from './io';\r\nimport { InputData } from './core/data';\r\nimport { Socket } from './socket';\r\n\r\nexport class Input extends IO {\r\n   \r\n    control: Control | null = null;\r\n\r\n    constructor(key: string, title: string, socket: Socket, multiConns: boolean = false) {\r\n        super(key, title, socket, multiConns);\r\n    }\r\n\r\n    hasConnection() {\r\n        return this.connections.length > 0;\r\n    }\r\n\r\n    addConnection(connection: Connection) {\r\n        if (!this.multipleConnections && this.hasConnection())\r\n            throw new Error('Multiple connections not allowed');\r\n        this.connections.push(connection);\r\n    }\r\n\r\n    addControl(control: Control) {\r\n        this.control = control;\r\n        control.parent = this;\r\n    }\r\n\r\n    showControl() {\r\n        return !this.hasConnection() && this.control !== null;\r\n    }\r\n\r\n    toJSON(): InputData {\r\n        return {\r\n            'connections': this.connections.map(c => {\r\n                if (!c.output.node) throw new Error('Node not added to Output');\r\n\r\n                return {\r\n                    node: c.output.node.id,\r\n                    output: c.output.key,\r\n                    data: c.data\r\n                };\r\n            })\r\n        };\r\n    }\r\n}","import { Data } from './data';\r\n\r\nexport class Validator {\r\n\r\n    static isValidData(data: Data) {\r\n        return typeof data.id === 'string' &&\r\n            this.isValidId(data.id) &&\r\n            data.nodes instanceof Object && !(data.nodes instanceof Array);\r\n    }\r\n\r\n    static isValidId(id: string) {\r\n        return /^[\\w-]{3,}@[0-9]+\\.[0-9]+\\.[0-9]+$/.test(id);\r\n    }\r\n\r\n    static validate(id: string, data: Data) {\r\n        const id1 = id.split('@');\r\n        const id2 = data.id.split('@');\r\n        let msg = [];\r\n\r\n        if (!this.isValidData(data))\r\n            msg.push('Data is not suitable'); \r\n        if (id !== data.id)\r\n            msg.push('IDs not equal');\r\n        if (id1[0] !== id2[0])\r\n            msg.push('Names don\\'t match');\r\n        if (id1[1] !== id2[1])\r\n            msg.push('Versions don\\'t match');\r\n\r\n        return { success: Boolean(!msg.length), msg: msg.join('. ') };\r\n    }\r\n}","import { Component } from '../engine/component';\r\nimport { Emitter } from './emitter'\r\nimport { Validator } from './validator'\r\nimport { EventsTypes as DefaultEvents, Events } from './events';\r\nimport { Plugin, PluginParams } from './plugin';\r\n\r\nexport class Context<EventsTypes> extends Emitter<EventsTypes & DefaultEvents> {\r\n\r\n    id: string;\r\n    plugins: Map<string, unknown>;\r\n    components: Map<string, Component>;\r\n\r\n    constructor(id: string, events: Events) {\r\n        super(events);\r\n\r\n        if (!Validator.isValidId(id))\r\n            throw new Error('ID should be valid to name@0.1.0 format');  \r\n        \r\n        this.id = id;\r\n        this.plugins = new Map();\r\n        this.components = new Map();\r\n    }\r\n\r\n    use<T extends Plugin, O extends PluginParams<T>>(plugin: T, options?: O) {\r\n        if (plugin.name && this.plugins.has(plugin.name)) throw new Error(`Plugin ${plugin.name} already in use`)\r\n\r\n        plugin.install(this, options || {});\r\n        this.plugins.set(plugin.name, options)\r\n    }\r\n\r\n    register(component: Component) {\r\n        if (this.components.has(component.name))\r\n            throw new Error(`Component ${component.name} already registered`);\r\n\r\n        this.components.set(component.name, component);\r\n        this.trigger('componentregister', component);\r\n    }\r\n\r\n    destroy() {\r\n        this.trigger('destroy');\r\n    }\r\n}","export function listenWindow<K extends keyof WindowEventMap>(event: K, handler: (e: WindowEventMap[K]) => void) {\r\n    window.addEventListener(event, handler);\r\n    \r\n    return () => {\r\n        window.removeEventListener<K>(event, handler);\r\n    }\r\n}","import { Component } from '../engine/component';\r\n\r\nexport class Events {\r\n\r\n    handlers: {};\r\n\r\n    constructor(handlers: {}) {\r\n        this.handlers = {\r\n            warn: [console.warn],\r\n            error: [console.error],\r\n            componentregister: [],\r\n            destroy: [],\r\n            ...handlers\r\n        }\r\n    }\r\n}\r\n\r\nexport interface EventsTypes {\r\n    warn: string | Error;\r\n    error: string | Error;\r\n    componentregister: Component;\r\n    destroy: void;\r\n}","import { listenWindow } from './utils';\r\n\r\nexport class Drag {\r\n\r\n    pointerStart: [number, number] | null;\r\n    el: HTMLElement;\r\n    destroy: () => void = () => {};\r\n\r\n    constructor(\r\n        el: HTMLElement,\r\n        private onTranslate = (_x: number, _y: number, _e: PointerEvent) => {},\r\n        private onStart = (_e: PointerEvent) => {},\r\n        private onDrag = (_e: PointerEvent) => {}\r\n    ) {\r\n        this.pointerStart = null;\r\n        this.el = el;\r\n\r\n        this.el.style.touchAction = 'none';\r\n        this.el.addEventListener('pointerdown', this.down.bind(this));\r\n    }\r\n\r\n    down(e: PointerEvent) {\r\n        if (this.pointerStart) {\r\n            this.destroy();\r\n        }\r\n\r\n        e.stopPropagation();\r\n        this.pointerStart = [e.pageX, e.pageY]\r\n\r\n        const destroyMove = listenWindow('pointermove', this.move.bind(this));\r\n        const destroyUp = listenWindow('pointerup', this.up.bind(this));\r\n\r\n        this.destroy = () => { destroyMove(); destroyUp(); };\r\n\r\n        this.onStart(e);\r\n    }\r\n\r\n    move(e: PointerEvent) {\r\n        if (!this.pointerStart) return;\r\n        e.preventDefault();\r\n\r\n        let [x, y] = [e.pageX, e.pageY]\r\n\r\n        let delta = [x - this.pointerStart[0], y - this.pointerStart[1]];\r\n\r\n        let zoom = this.el.getBoundingClientRect().width / this.el.offsetWidth;\r\n\r\n        this.onTranslate(delta[0] / zoom, delta[1] / zoom, e);\r\n    }\r\n\r\n    up(e: PointerEvent) {\r\n        if (!this.pointerStart) return;\r\n\r\n        this.destroy();\r\n        this.destroy = () => {};\r\n\r\n        this.pointerStart = null;\r\n        this.onDrag(e);\r\n    }\r\n}","import { listenWindow } from './utils';\r\n\r\ninterface DeltaWheelEvent { wheelDelta: number }\r\n\r\nexport class Zoom {\r\n\r\n    el: HTMLElement;\r\n    intensity: number;\r\n    onzoom: Function;\r\n    previous: { cx: number; cy: number; distance: number } | null = null;\r\n\r\n    pointers: PointerEvent[] = [];\r\n    destroy: () => void;\r\n\r\n    constructor(container: HTMLElement, el: HTMLElement, intensity: number, onzoom: Function) {\r\n        this.el = el;\r\n        this.intensity = intensity;\r\n        this.onzoom = onzoom;\r\n\r\n        container.addEventListener('wheel', this.wheel.bind(this));\r\n        container.addEventListener('pointerdown', this.down.bind(this));\r\n        container.addEventListener('dblclick', this.dblclick.bind(this));\r\n        container.addEventListener('pointermove', this.move.bind(this));\r\n\r\n        const destroyUp = listenWindow('pointerup', this.end.bind(this));\r\n        const destroyCancel = listenWindow('pointercancel', this.end.bind(this));\r\n\r\n        this.destroy = () => { destroyUp(); destroyCancel(); }\r\n    }\r\n\r\n    get translating() { // is translating while zoom (works on multitouch)\r\n        return this.pointers.length >= 2;\r\n    }\r\n\r\n    wheel(e: WheelEvent) {\r\n        e.preventDefault();\r\n        \r\n        const rect = this.el.getBoundingClientRect();\r\n        const wheelDelta = (e as unknown as DeltaWheelEvent).wheelDelta;\r\n        const delta = (wheelDelta ? wheelDelta / 120 : - e.deltaY / 3) * this.intensity;\r\n\r\n        const ox = (rect.left - e.clientX) * delta;\r\n        const oy = (rect.top - e.clientY) * delta;\r\n\r\n        this.onzoom(delta, ox, oy, 'wheel');\r\n    }\r\n\r\n    touches() {\r\n        let e = { touches: this.pointers }\r\n        let [x1, y1] = [e.touches[0].clientX, e.touches[0].clientY];\r\n        let [x2, y2] = [e.touches[1].clientX, e.touches[1].clientY];\r\n\r\n        let distance = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\r\n\r\n        return {\r\n            cx: (x1 + x2)/2,\r\n            cy: (y1 + y2)/2,\r\n            distance\r\n        };\r\n    }\r\n\r\n    down(e: PointerEvent) {\r\n        this.pointers.push(e);\r\n    }\r\n\r\n    move(e: PointerEvent) {\r\n        this.pointers = this.pointers.map(p => p.pointerId === e.pointerId ? e : p)\r\n        if (!this.translating) return;\r\n\r\n        let rect = this.el.getBoundingClientRect();\r\n\r\n        let { cx, cy, distance } = this.touches();\r\n\r\n        if (this.previous !== null) {\r\n            let delta = distance / this.previous.distance - 1;\r\n    \r\n            const ox = (rect.left - cx) * delta;\r\n            const oy = (rect.top - cy) * delta;\r\n\r\n            this.onzoom(delta, ox - (this.previous.cx - cx), oy - (this.previous.cy - cy), 'touch');\r\n        }\r\n        this.previous = { cx, cy, distance };\r\n    }\r\n\r\n    end(e: PointerEvent) {\r\n        this.previous = null;\r\n        this.pointers = this.pointers.filter(p => p.pointerId !== e.pointerId)\r\n    }\r\n\r\n    dblclick(e: MouseEvent) {\r\n        e.preventDefault();\r\n        \r\n        const rect = this.el.getBoundingClientRect();\r\n        const delta = 4 * this.intensity;\r\n\r\n        const ox = (rect.left - e.clientX) * delta;\r\n        const oy = (rect.top - e.clientY) * delta;\r\n\r\n        this.onzoom(delta, ox, oy, 'dblclick'); \r\n    }\r\n}","import { Drag } from './drag';\r\nimport { Emitter } from '../core/emitter';\r\nimport { EventsTypes } from '../events';\r\nimport { Zoom } from './zoom';\r\n\r\nexport interface Transform { k: number; x: number; y: number }\r\nexport interface Mouse { x: number; y: number }\r\nexport type ZoomSource = 'wheel' | 'touch' | 'dblclick';\r\n\r\nexport class Area extends Emitter<EventsTypes> {\r\n\r\n    el: HTMLElement;\r\n    container: HTMLElement;\r\n    transform: Transform = { k: 1, x: 0, y: 0 };\r\n    mouse: Mouse = { x: 0, y: 0 }\r\n    \r\n    private _startPosition: Transform | null = null\r\n    private _zoom: Zoom;\r\n    private _drag: Drag;\r\n\r\n    constructor(container: HTMLElement, emitter: Emitter<EventsTypes>) {\r\n        super(emitter);\r\n        \r\n        const el = this.el = document.createElement('div');\r\n\r\n        this.container = container;\r\n        el.style.transformOrigin = '0 0';\r\n\r\n        this._zoom = new Zoom(container, el, 0.1, this.onZoom.bind(this));\r\n        this._drag = new Drag(container, this.onTranslate.bind(this), this.onStart.bind(this));\r\n\r\n        emitter.on('destroy', () => {\r\n            this._zoom.destroy();\r\n            this._drag.destroy();\r\n        });\r\n\r\n        this.container.addEventListener('pointermove', this.pointermove.bind(this));\r\n\r\n        this.update();\r\n    }\r\n\r\n    update() {\r\n        const t = this.transform;\r\n\r\n        this.el.style.transform = `translate(${t.x}px, ${t.y}px) scale(${t.k})`;\r\n    }\r\n\r\n    pointermove(e: PointerEvent) {\r\n        const { clientX, clientY } = e;\r\n        const rect = this.el.getBoundingClientRect();\r\n        const x = clientX - rect.left;\r\n        const y = clientY - rect.top;\r\n        const k = this.transform.k;\r\n        \r\n        this.mouse = { x: x / k, y: y / k };\r\n        this.trigger('mousemove', { ...this.mouse }); // TODO rename on `pointermove`\r\n    }\r\n\r\n    onStart() {\r\n        this._startPosition = { ...this.transform };\r\n    }\r\n\r\n    onTranslate(dx: number, dy: number) {\r\n        if (this._zoom.translating) return; // lock translation while zoom on multitouch\r\n        if (this._startPosition) this.translate(this._startPosition.x + dx, this._startPosition.y + dy);\r\n    }\r\n\r\n    onZoom(delta: number, ox: number, oy: number, source: ZoomSource) {\r\n        this.zoom(this.transform.k * (1 + delta), ox, oy, source);\r\n\r\n        this.update();\r\n    }\r\n\r\n    translate(x: number, y: number) {\r\n        const params = { transform: this.transform, x, y };\r\n\r\n        if (!this.trigger('translate', params)) return;\r\n\r\n        this.transform.x = params.x;\r\n        this.transform.y = params.y;\r\n\r\n        this.update();\r\n        this.trigger('translated');\r\n    }\r\n\r\n    zoom(zoom: number, ox = 0, oy = 0, source: ZoomSource) {\r\n        const k = this.transform.k;\r\n        const params = { transform: this.transform, zoom, source };\r\n\r\n        if (!this.trigger('zoom', params)) return;\r\n        \r\n        const d = (k - params.zoom) / ((k - zoom) || 1);\r\n\r\n        this.transform.k = params.zoom || 1;\r\n        this.transform.x += ox * d;\r\n        this.transform.y += oy * d;\r\n\r\n        this.update();\r\n        this.trigger('zoomed', { source });\r\n    }\r\n\r\n    appendChild(el: HTMLElement) {\r\n        this.el.appendChild(el)\r\n    }\r\n\r\n    removeChild(el: HTMLElement) {\r\n        this.el.removeChild(el)\r\n    }\r\n}","import { Connection } from '../connection';\r\nimport { Emitter } from '../core/emitter';\r\nimport { EventsTypes } from '../events';\r\nimport { NodeView } from './node';\r\n\r\nexport class ConnectionView extends Emitter<EventsTypes> {\r\n\r\n    connection: Connection;\r\n    inputNode: NodeView;\r\n    outputNode: NodeView;\r\n    el: HTMLElement;\r\n\r\n    constructor(connection: Connection, inputNode: NodeView, outputNode: NodeView, emitter: Emitter<EventsTypes>) {\r\n        super(emitter);\r\n        this.connection = connection;\r\n        this.inputNode = inputNode;\r\n        this.outputNode = outputNode;\r\n\r\n        this.el = document.createElement('div');\r\n        this.el.style.position = 'absolute';\r\n        this.el.style.zIndex = '-1';\r\n\r\n        this.trigger('renderconnection', { \r\n            el: this.el, \r\n            connection: this.connection, \r\n            points: this.getPoints()\r\n        });\r\n    }\r\n\r\n    getPoints() {\r\n        const [x1, y1] = this.outputNode.getSocketPosition(this.connection.output);\r\n        const [x2, y2] = this.inputNode.getSocketPosition(this.connection.input);\r\n\r\n        return [x1, y1, x2, y2];\r\n    }\r\n\r\n    update() {\r\n        this.trigger('updateconnection', { \r\n            el: this.el, \r\n            connection: this.connection, \r\n            points: this.getPoints()\r\n        });\r\n    }\r\n}","import { Control } from '../control';\r\nimport { Emitter } from '../core/emitter';\r\nimport { EventsTypes } from '../events';\r\n\r\nexport class ControlView extends Emitter<EventsTypes> {\r\n\r\n    constructor(el: HTMLElement, control: Control, emitter: Emitter<EventsTypes>) {\r\n        super(emitter);\r\n        this.trigger('rendercontrol', { el, control });\r\n    }\r\n}","import { Emitter } from '../core/emitter';\r\nimport { EventsTypes } from '../events';\r\nimport { IO } from '../io';\r\nimport { Node } from '../node';\r\n\r\nexport class SocketView extends Emitter<EventsTypes> {\r\n\r\n    el: HTMLElement;\r\n    type: string;\r\n    io: IO;\r\n    node: Node;\r\n\r\n    constructor(el: HTMLElement, type: string, io: IO, node: Node, emitter: Emitter<EventsTypes>) {\r\n        super(emitter);\r\n        this.el = el;\r\n        this.type = type;\r\n        this.io = io;\r\n        this.node = node;\r\n\r\n        this.trigger('rendersocket', { el, [type]: this.io, socket: io.socket });\r\n    }\r\n\r\n    getPosition({ position }: { position: number[] }): [number, number] {\r\n        const el = this.el;\r\n\r\n        return [\r\n            position[0] + el.offsetLeft + el.offsetWidth / 2,\r\n            position[1] + el.offsetTop + el.offsetHeight / 2\r\n        ]\r\n    }\r\n}","import { Component } from '../engine/component';\r\nimport { Control } from '../control';\r\nimport { ControlView } from './control';\r\nimport { Drag } from './drag';\r\nimport { Emitter } from '../core/emitter';\r\nimport { EventsTypes } from '../events';\r\nimport { IO } from '../io';\r\nimport { Node } from '../node';\r\nimport { SocketView } from './socket';\r\n\r\nexport class NodeView extends Emitter<EventsTypes> {\r\n\r\n    node: Node;\r\n    component: Component;\r\n    sockets = new Map<IO, SocketView>();\r\n    controls = new Map<Control, ControlView>();\r\n\r\n    el: HTMLElement;\r\n    private _startPosition: number[] = [];\r\n    private _drag: Drag;\r\n\r\n    constructor(node: Node, component: Component, emitter: Emitter<EventsTypes>) {\r\n        super(emitter);\r\n\r\n        this.node = node;\r\n        this.component = component;\r\n        this.el = document.createElement('div');\r\n        this.el.style.position = 'absolute';\r\n\r\n        this.el.addEventListener('contextmenu', e => this.trigger('contextmenu', { e, node: this.node }));\r\n\r\n        this._drag = new Drag(this.el, this.onTranslate.bind(this), this.onSelect.bind(this), () => {\r\n            this.trigger('nodedraged', node);\r\n        });\r\n\r\n        this.trigger('rendernode', {\r\n            el: this.el, \r\n            node, \r\n            component: component,\r\n            bindSocket: this.bindSocket.bind(this),\r\n            bindControl: this.bindControl.bind(this)\r\n        });\r\n\r\n        this.update();\r\n    }\r\n\r\n    clearSockets() {\r\n        const ios: IO[] = [ ...this.node.inputs.values(), ...this.node.outputs.values()];\r\n        \r\n        this.sockets.forEach(s => {\r\n            if (!ios.includes(s.io)) this.sockets.delete(s.io);\r\n        });\r\n    }\r\n\r\n    bindSocket(el: HTMLElement, type: string, io: IO) {\r\n        this.clearSockets();\r\n        this.sockets.set(io, new SocketView(el, type, io, this.node, this));\r\n    }\r\n\r\n    bindControl(el: HTMLElement, control: Control) {\r\n        this.controls.set(control, new ControlView(el, control, this));\r\n    }\r\n\r\n    getSocketPosition(io: IO) {\r\n        const socket = this.sockets.get(io);\r\n\r\n        if (!socket) throw new Error(`Socket not fount for ${io.name} with key ${io.key}`);\r\n\r\n        return socket.getPosition(this.node);\r\n    }\r\n\r\n    onSelect(e: MouseEvent) {\r\n        const payload = { node: this.node, accumulate: e.ctrlKey, e };\r\n    \r\n        this.onStart();\r\n        this.trigger('multiselectnode', payload);\r\n        this.trigger('selectnode', payload);\r\n    }\r\n\r\n    onStart() {\r\n        this._startPosition = [...this.node.position];\r\n    }\r\n\r\n    onTranslate(dx: number, dy: number) {\r\n        this.trigger('translatenode', { node: this.node, dx, dy });\r\n    }\r\n\r\n    onDrag(dx: number, dy: number) {\r\n        const x = this._startPosition[0] + dx;\r\n        const y = this._startPosition[1] + dy;\r\n\r\n        this.translate(x, y);\r\n    }\r\n\r\n    translate(x: number, y: number) {\r\n        const node = this.node;\r\n        const params = { node, x, y };\r\n\r\n        if (!this.trigger('nodetranslate', params)) return;\r\n\r\n        const [px, py] = node.position;\r\n        const prev: [number, number] = [px, py];\r\n\r\n        node.position[0] = params.x;\r\n        node.position[1] = params.y;\r\n\r\n        this.update();\r\n        this.trigger('nodetranslated', { node, prev });\r\n    }\r\n\r\n    update() {\r\n        const [x, y] = this.node.position;\r\n\r\n        this.el.style.transform = `translate(${x}px, ${y}px)`;\r\n    }\r\n\r\n    remove() {\r\n        \r\n    }\r\n\r\n    destroy() {\r\n        this._drag.destroy();\r\n    }\r\n}","import { Area } from './area';\r\nimport { Component } from '../engine/component';\r\nimport { Connection } from '../connection';\r\nimport { ConnectionView } from './connection';\r\nimport { Emitter } from '../core/emitter';\r\nimport { EventsTypes } from '../events';\r\nimport { Node } from '../node';\r\nimport { NodeView } from './node';\r\nimport { listenWindow } from './utils';\r\n\r\nexport class EditorView extends Emitter<EventsTypes> {\r\n\r\n    container: HTMLElement;\r\n    components: Map<string, Component>;\r\n    nodes = new Map<Node, NodeView>();\r\n    connections = new Map<Connection, ConnectionView>();\r\n    area: Area;\r\n\r\n    constructor(container: HTMLElement, components: Map<string, Component>, emitter: Emitter<EventsTypes>) {\r\n        super(emitter);\r\n\r\n        this.container = container;\r\n        this.components = components;\r\n\r\n        this.container.style.overflow = 'hidden';\r\n\r\n        this.container.addEventListener('click', this.click.bind(this));\r\n        this.container.addEventListener('contextmenu', e => this.trigger('contextmenu', { e, view: this }));\r\n        emitter.on('destroy', listenWindow('resize', this.resize.bind(this)));\r\n        emitter.on('destroy', () => this.nodes.forEach(view => view.destroy()));\r\n  \r\n        this.on('nodetranslated', this.updateConnections.bind(this));\r\n            \r\n        this.area = new Area(container, this);\r\n        this.container.appendChild(this.area.el);\r\n    }\r\n\r\n    addNode(node: Node) {\r\n        const component = this.components.get(node.name);\r\n\r\n        if (!component) throw new Error(`Component ${node.name} not found`);\r\n        \r\n        const nodeView = new NodeView(node, component, this);\r\n\r\n        this.nodes.set(node, nodeView);\r\n        this.area.appendChild(nodeView.el);\r\n    }\r\n\r\n    removeNode(node: Node) {\r\n        const nodeView = this.nodes.get(node);\r\n\r\n        this.nodes.delete(node);\r\n        if (nodeView) {\r\n            this.area.removeChild(nodeView.el);\r\n            nodeView.destroy();\r\n        }\r\n    }\r\n\r\n    addConnection(connection: Connection) {\r\n        if (!connection.input.node || !connection.output.node)\r\n            throw new Error('Connection input or output not added to node');\r\n\r\n        const viewInput = this.nodes.get(connection.input.node);\r\n        const viewOutput = this.nodes.get(connection.output.node);\r\n\r\n        if (!viewInput || !viewOutput)\r\n            throw new Error('View node not fount for input or output');\r\n\r\n        const connView = new ConnectionView(connection, viewInput, viewOutput, this);\r\n\r\n        this.connections.set(connection, connView);\r\n        this.area.appendChild(connView.el);\r\n    }\r\n\r\n    removeConnection(connection: Connection) {\r\n        const connView = this.connections.get(connection);\r\n\r\n        this.connections.delete(connection);\r\n        if (connView)\r\n            this.area.removeChild(connView.el);\r\n    }\r\n\r\n    updateConnections({ node }: { node: Node }) {\r\n        node.getConnections().forEach(conn => {\r\n            let connView = this.connections.get(conn);\r\n\r\n            if (!connView) throw new Error('Connection view not found');\r\n\r\n            connView.update();\r\n        });\r\n    }\r\n\r\n    resize() {\r\n        const { container } = this;\r\n\r\n        if (!container.parentElement)\r\n            throw new Error('Container doesn\\'t have parent element');\r\n\r\n        const width = container.parentElement.clientWidth;\r\n        const height = container.parentElement.clientHeight;\r\n\r\n        container.style.width = width + 'px';\r\n        container.style.height = height + 'px';\r\n    }\r\n\r\n    click(e: Event) {\r\n        const container = this.container;\r\n        \r\n        if (container !== e.target) return;\r\n        if (!this.trigger('click', { e, container })) return;\r\n    }\r\n}\r\n","import { Node } from './node';\r\n\r\nexport class Selected {\r\n\r\n    list: Node[] = [];\r\n\r\n    add(item: Node, accumulate = false) {\r\n        if (!accumulate)\r\n            this.list = [item]; \r\n        else if (!this.contains(item))\r\n            this.list.push(item);   \r\n    }\r\n\r\n    clear() {\r\n        this.list = [];\r\n    }\r\n\r\n    remove(item: Node) {\r\n        this.list.splice(this.list.indexOf(item), 1);\r\n    }\r\n\r\n    contains(item: Node) {\r\n        return this.list.indexOf(item) !== -1;\r\n    }\r\n\r\n    each(callback: (n: Node, index: number) => void) {\r\n        this.list.forEach(callback);\r\n    }\r\n}","import { Component } from './component';\r\nimport { Connection } from './connection';\r\nimport { Control } from './control';\r\nimport { Data } from './core/data';\r\nimport { EditorView } from './view';\r\nimport { Input } from './input';\r\nimport { Node } from './node';\r\nimport { Output } from './output';\r\nimport { Socket } from './socket';\r\nimport { EventsTypes as DefaultEventsTypes, Events } from './core/events';\r\nimport { Mouse, Transform, ZoomSource } from './view/area';\r\n\r\nexport class EditorEvents extends Events {\r\n\r\n    constructor() {\r\n        super({\r\n            nodecreate: [],\r\n            nodecreated: [],\r\n            noderemove: [],\r\n            noderemoved: [],\r\n            connectioncreate: [],\r\n            connectioncreated: [],\r\n            connectionremove: [],\r\n            connectionremoved: [],\r\n            translatenode: [],\r\n            nodetranslate: [],\r\n            nodetranslated: [],\r\n            nodedraged: [],\r\n            selectnode: [],\r\n            multiselectnode: [],\r\n            nodeselect: [],\r\n            nodeselected: [],\r\n            rendernode: [],\r\n            rendersocket: [],\r\n            rendercontrol: [],\r\n            renderconnection: [],\r\n            updateconnection: [],\r\n            keydown: [],\r\n            keyup: [],\r\n            translate: [],\r\n            translated: [],\r\n            zoom: [],\r\n            zoomed: [],\r\n            click: [],\r\n            mousemove: [],\r\n            contextmenu: [],\r\n            import: [],\r\n            export: [],\r\n            process: [],\r\n            clear: []\r\n        });\r\n    }    \r\n}\r\n\r\nexport interface EventsTypes extends DefaultEventsTypes {\r\n    componentregister: Component;\r\n    nodecreate: Node;\r\n    nodecreated: Node;\r\n    noderemove: Node;\r\n    noderemoved: Node;\r\n    connectioncreate: { input: Input; output: Output };\r\n    connectioncreated: Connection;\r\n    connectionremove: Connection;\r\n    connectionremoved: Connection;\r\n    translatenode: { node: Node; dx: number; dy: number };\r\n    nodetranslate: { node: Node; x: number; y: number };\r\n    nodetranslated: { node: Node; prev: [number, number] };\r\n    nodedraged: Node;\r\n    selectnode: {\r\n        node: Node;\r\n        accumulate: boolean;\r\n    };\r\n    multiselectnode: {\r\n        node: Node;\r\n        accumulate: boolean;\r\n        e: MouseEvent;\r\n    };\r\n    nodeselect: Node;\r\n    nodeselected: Node;\r\n    rendernode: {\r\n        el: HTMLElement;\r\n        node: Node;\r\n        component: object;\r\n        bindSocket: Function;\r\n        bindControl: Function;\r\n    };\r\n    rendersocket: {\r\n        el: HTMLElement;\r\n        input?: Input;\r\n        output?: Output;\r\n        socket: Socket;\r\n    };\r\n    rendercontrol: {\r\n        el: HTMLElement;\r\n        control: Control;\r\n    };\r\n    renderconnection: {\r\n        el: HTMLElement;\r\n        connection: Connection;\r\n        points: number[];\r\n    };\r\n    updateconnection: {\r\n        el: HTMLElement;\r\n        connection: Connection;\r\n        points: number[];\r\n    };\r\n    keydown: KeyboardEvent;\r\n    keyup: KeyboardEvent;\r\n    translate: {\r\n        transform: Transform;\r\n        x: number;\r\n        y: number;\r\n    };\r\n    translated: void;\r\n    zoom: {\r\n        transform: Transform;\r\n        zoom: number;\r\n        source: ZoomSource;\r\n    };\r\n    zoomed: {\r\n        source: ZoomSource;\r\n    };\r\n    click: {\r\n        e: Event;\r\n        container: HTMLElement;\r\n    };\r\n    mousemove: Mouse;\r\n    contextmenu: {\r\n        e: MouseEvent;\r\n        view?: EditorView;\r\n        node?: Node;\r\n    };\r\n    import: Data;\r\n    export: Data;\r\n    process: void;\r\n    clear: void;\r\n}","import { Component } from './component';\r\nimport { Connection } from './connection';\r\nimport { Context } from './core/context';\r\nimport { Data } from './core/data';\r\nimport { EditorView } from './view/index';\r\nimport { Input } from './input';\r\nimport { Node } from './node';\r\nimport { Output } from './output';\r\nimport { Selected } from './selected';\r\nimport { Validator } from './core/validator';\r\nimport { EditorEvents, EventsTypes } from './events';\r\n\r\nexport class NodeEditor extends Context<EventsTypes> {\r\n\r\n    nodes: Node[] = [];\r\n    selected = new Selected();\r\n    view: EditorView;\r\n\r\n    constructor(id: string, container: HTMLElement) {\r\n        super(id, new EditorEvents());\r\n\r\n        this.view = new EditorView(container, this.components, this);\r\n\r\n        container.setAttribute('tabindex', '-1'); // make element focusable so it receives key events\r\n        container.addEventListener('keydown', e => this.trigger('keydown', e));\r\n        container.addEventListener('keyup', e => this.trigger('keyup', e));\r\n\r\n        this.on('selectnode', ({ node, accumulate }) => this.selectNode(node, accumulate));\r\n        this.on('nodeselected', () => this.selected.each(n => {\r\n            const nodeView = this.view.nodes.get(n);\r\n\r\n            nodeView && nodeView.onStart()\r\n        }));\r\n        this.on('translatenode', ({ dx, dy }) => this.selected.each(n => {\r\n            const nodeView = this.view.nodes.get(n);\r\n\r\n            nodeView && nodeView.onDrag(dx, dy)\r\n        }));\r\n    }\r\n\r\n    addNode(node: Node) {\r\n        if (!this.trigger('nodecreate', node)) return;\r\n\r\n        this.nodes.push(node);\r\n        this.view.addNode(node);\r\n        \r\n        this.trigger('nodecreated', node);\r\n    }\r\n\r\n    removeNode(node: Node) {\r\n        if (!this.trigger('noderemove', node)) return;\r\n\r\n        node.getConnections().forEach(c => this.removeConnection(c));\r\n\r\n        this.nodes.splice(this.nodes.indexOf(node), 1);\r\n        this.view.removeNode(node);\r\n\r\n        this.trigger('noderemoved', node);\r\n    }\r\n\r\n    connect(output: Output, input: Input, data: unknown = {}) {\r\n        if (!this.trigger('connectioncreate', { output, input })) return;\r\n\r\n        try {\r\n            const connection = output.connectTo(input);\r\n\r\n            connection.data = data;\r\n            this.view.addConnection(connection);\r\n\r\n            this.trigger('connectioncreated', connection);\r\n        } catch (e) {\r\n            this.trigger('warn', e)\r\n        }\r\n    }\r\n\r\n    removeConnection(connection: Connection) {\r\n        if (!this.trigger('connectionremove', connection)) return;\r\n            \r\n        this.view.removeConnection(connection);\r\n        connection.remove();\r\n\r\n        this.trigger('connectionremoved', connection);\r\n    }\r\n\r\n    selectNode(node: Node, accumulate: boolean = false) {\r\n        if (this.nodes.indexOf(node) === -1) \r\n            throw new Error('Node not exist in list');\r\n        \r\n        if (!this.trigger('nodeselect', node)) return;\r\n\r\n        this.selected.add(node, accumulate);\r\n        \r\n        this.trigger('nodeselected', node);\r\n    }\r\n\r\n    getComponent(name: string) {\r\n        const component = this.components.get(name);\r\n\r\n        if (!component)\r\n            throw `Component ${name} not found`;\r\n        \r\n        return component as Component;\r\n    }\r\n\r\n    register(component: Component) {\r\n        super.register(component)\r\n        component.editor = this;\r\n    }\r\n\r\n    clear() {\r\n        [...this.nodes].forEach(node => this.removeNode(node));\r\n        this.trigger('clear');\r\n    }\r\n\r\n    toJSON() {\r\n        const data: Data = { id: this.id, nodes: {} };\r\n        \r\n        this.nodes.forEach(node => data.nodes[node.id] = node.toJSON());\r\n        this.trigger('export', data);\r\n        return data;\r\n    }\r\n\r\n    beforeImport(json: Data) {\r\n        const checking = Validator.validate(this.id, json);\r\n        \r\n        if (!checking.success) {\r\n            this.trigger('warn', checking.msg);\r\n            return false;\r\n        }\r\n        \r\n        this.silent = true;\r\n        this.clear();\r\n        this.trigger('import', json);\r\n        return true;\r\n    }\r\n\r\n    afterImport() {\r\n        this.silent = false;\r\n        return true;\r\n    }\r\n\r\n    async fromJSON(json: Data) {\r\n        if (!this.beforeImport(json)) return false;\r\n        const nodes: {[key: string]: Node} = {};\r\n\r\n        try {\r\n            await Promise.all(Object.keys(json.nodes).map(async id => {\r\n                const node = json.nodes[id];\r\n                const component = this.getComponent(node.name);\r\n\r\n                nodes[id] = await component.build(Node.fromJSON(node));\r\n                this.addNode(nodes[id]);\r\n            }));\r\n        \r\n            Object.keys(json.nodes).forEach(id => {\r\n                const jsonNode = json.nodes[id];\r\n                const node = nodes[id];\r\n                \r\n                Object.keys(jsonNode.outputs).forEach(key => {\r\n                    const outputJson = jsonNode.outputs[key];\r\n\r\n                    outputJson.connections.forEach(jsonConnection => {\r\n                        const nodeId = jsonConnection.node;\r\n                        const data = jsonConnection.data;\r\n                        const targetOutput = node.outputs.get(key);\r\n                        const targetInput = nodes[nodeId].inputs.get(jsonConnection.input);\r\n\r\n                        if (!targetOutput || !targetInput) {\r\n                            return this.trigger('error', `IO not found for node ${node.id}`);\r\n                        }\r\n\r\n                        this.connect(targetOutput, targetInput, data);\r\n                    });\r\n                });\r\n\r\n            });\r\n        } catch (e) {\r\n            this.trigger('warn', e);\r\n            return !this.afterImport();\r\n        }\r\n\r\n        return this.afterImport();\r\n    }\r\n}\r\n","import { Connection } from './connection';\r\nimport { IO } from './io';\r\nimport { Input } from './input';\r\nimport { OutputData } from './core/data';\r\nimport { Socket } from './socket';\r\n\r\nexport class Output extends IO {\r\n  \r\n    constructor(key: string, title: string, socket: Socket, multiConns: boolean = true) {\r\n        super(key, title, socket, multiConns);\r\n    }\r\n    \r\n    hasConnection() {\r\n        return this.connections.length > 0;\r\n    }\r\n\r\n    connectTo(input: Input) {\r\n        if (!this.socket.compatibleWith(input.socket))\r\n            throw new Error('Sockets not compatible');\r\n        if (!input.multipleConnections && input.hasConnection())\r\n            throw new Error('Input already has one connection');\r\n        if (!this.multipleConnections && this.hasConnection())\r\n            throw new Error('Output already has one connection');\r\n\r\n        const connection = new Connection(this, input);\r\n\r\n        this.connections.push(connection);\r\n        return connection;\r\n    }\r\n\r\n    connectedTo(input: Input) {\r\n        return this.connections.some((item) => {\r\n            return item.input === input;\r\n        });\r\n    }\r\n\r\n    toJSON(): OutputData {\r\n        return {\r\n            'connections': this.connections.map(c => {\r\n                if (!c.input.node) throw new Error('Node not added to Input');\r\n\r\n                return {\r\n                    node: c.input.node.id,\r\n                    input: c.input.key,\r\n                    data: c.data\r\n                }\r\n            })\r\n        };\r\n    }\r\n}","export class Socket {\r\n\r\n    name: string;\r\n    data: unknown;\r\n    compatible: Socket[] = [];\r\n\r\n    constructor(name: string, data = {}) {\r\n        this.name = name;\r\n        this.data = data;\r\n        this.compatible = [];\r\n    }\r\n\r\n    combineWith(socket: Socket) {\r\n        this.compatible.push(socket);\r\n    }\r\n\r\n    compatibleWith(socket: Socket) {\r\n        return this === socket || this.compatible.includes(socket);\r\n    }\r\n}","import { InputConnectionData, NodeData, NodesData } from '../core/data';\r\n\r\nfunction intersect<T>(array1: T[], array2: T[]) {\r\n    return array1.filter(value => -1 !== array2.indexOf(value));\r\n}\r\n\r\nexport class Recursion {\r\n\r\n    nodes: NodesData;\r\n\r\n    constructor(nodes: NodesData) {\r\n        this.nodes = nodes;\r\n    }\r\n    \r\n    extractInputNodes(node: NodeData): NodeData[] {\r\n        return Object.keys(node.inputs).reduce((acc: NodeData[], key: string) => {\r\n            const { connections } = node.inputs[key];\r\n            const nodesData = (connections || []).reduce((b: NodeData[], c: InputConnectionData) => {\r\n                return [...b, this.nodes[c.node]];\r\n            }, []);\r\n\r\n            return [...acc, ...nodesData]\r\n        }, []);\r\n    }\r\n\r\n    findSelf(list: NodeData[], inputNodes: NodeData[]): NodeData | null {\r\n        const inters = intersect<NodeData>(list, inputNodes);\r\n\r\n        if (inters.length)\r\n            return inters[0];\r\n        \r\n        for (let node of inputNodes) {\r\n            let l = [node, ...list];\r\n            let inter = this.findSelf(l, this.extractInputNodes(node));\r\n\r\n            if (inter)\r\n                return inter;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    detect(): NodeData | null {\r\n        const nodesArr = Object.keys(this.nodes).map(id => this.nodes[id]);\r\n\r\n        for (let node of nodesArr) {\r\n            let inters = this.findSelf([node], this.extractInputNodes(node));\r\n\r\n            if (inters)\r\n                return inters;\r\n        }\r\n\r\n        return null;\r\n    }\r\n}","export const State = { AVAILABLE: 0, PROCESSED: 1, ABORT: 2 }","import { Events } from '../core/events';\r\n\r\nexport class EngineEvents extends Events {\r\n\r\n    constructor() {\r\n        super({});\r\n    }    \r\n}\r\nexport interface EventsTypes {\r\n}","import { Component } from './component';\r\nimport { Context } from '../core/context';\r\nimport { Recursion } from './recursion';\r\nimport { State } from './state';\r\nimport { Validator } from '../core/validator';\r\nimport { Data, NodeData, WorkerOutputs } from '../core/data';\r\nimport { EngineEvents, EventsTypes } from './events';\r\nexport { Component, Recursion };\r\n\r\ninterface EngineNode extends NodeData {\r\n    busy: boolean;\r\n    unlockPool: (() => void)[];\r\n    outputData: WorkerOutputs;\r\n}\r\n\r\nexport class Engine extends Context<EventsTypes> {\r\n\r\n    args: unknown[] = [];\r\n    data: Data | null = null;\r\n    state = State.AVAILABLE;\r\n    onAbort = () => { };\r\n\r\n    constructor(id: string) {\r\n        super(id, new EngineEvents());\r\n    }\r\n\r\n    public clone() {\r\n        const engine = new Engine(this.id);\r\n\r\n        this.components.forEach(c => engine.register(c));\r\n\r\n        return engine;\r\n    }\r\n\r\n    async throwError (message: string, data: unknown = null) {\r\n        await this.abort();\r\n        this.trigger('error', { message, data });\r\n        this.processDone();\r\n\r\n        return 'error';\r\n    }\r\n\r\n    private processStart() {\r\n        if (this.state === State.AVAILABLE) {  \r\n            this.state = State.PROCESSED;\r\n            return true;\r\n        }\r\n\r\n        if (this.state === State.ABORT) {\r\n            return false;\r\n        }\r\n\r\n        console.warn(`The process is busy and has not been restarted.\r\n                Use abort() to force it to complete`);\r\n        return false;\r\n    }\r\n\r\n    private processDone() {\r\n        const success = this.state !== State.ABORT;\r\n\r\n        this.state = State.AVAILABLE;\r\n        \r\n        if (!success) {\r\n            this.onAbort();\r\n            this.onAbort = () => { }\r\n        }    \r\n\r\n        return success;\r\n    }\r\n\r\n    public async abort() {\r\n        return new Promise(ret => {\r\n            if (this.state === State.PROCESSED) {\r\n                this.state = State.ABORT;\r\n                this.onAbort = ret;\r\n            }\r\n            else if (this.state === State.ABORT) {\r\n                this.onAbort();\r\n                this.onAbort = ret;\r\n            }\r\n            else\r\n                ret();\r\n        });\r\n    }\r\n\r\n    private async lock(node: EngineNode) {\r\n        return new Promise(res => {\r\n            node.unlockPool = node.unlockPool || [];\r\n            if (node.busy && !node.outputData)\r\n                node.unlockPool.push(res);\r\n            else \r\n                res();\r\n            \r\n            node.busy = true;\r\n        });    \r\n    }\r\n\r\n    unlock(node: EngineNode) {\r\n        node.unlockPool.forEach(a => a());\r\n        node.unlockPool = [];\r\n        node.busy = false;\r\n    }\r\n\r\n    private async extractInputData(node: NodeData) {\r\n        const obj: {[id: string]: any} = {};\r\n\r\n        for (let key of Object.keys(node.inputs)) {\r\n            const input = node.inputs[key];\r\n            const conns = input.connections;\r\n            const connData = await Promise.all(conns.map(async (c) => {\r\n                const prevNode = (this.data as Data).nodes[c.node];\r\n\r\n                const outputs = await this.processNode(prevNode as EngineNode);\r\n\r\n                if (!outputs) \r\n                    this.abort();\r\n                else\r\n                    return outputs[c.output];\r\n            }));\r\n\r\n            obj[key] = connData;\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    private async processWorker(node: NodeData) {\r\n        const inputData = await this.extractInputData(node);\r\n        const component = this.components.get(node.name) as Component;\r\n        const outputData = {};\r\n\r\n        try {\r\n            await component.worker(node, inputData, outputData, ...this.args);\r\n        } catch (e) {\r\n            this.abort();\r\n            this.trigger('warn', e);\r\n        }\r\n\r\n        return outputData;\r\n    }\r\n\r\n    private async processNode(node: EngineNode) {\r\n        if (this.state === State.ABORT || !node)\r\n            return null;\r\n        \r\n        await this.lock(node);\r\n\r\n        if (!node.outputData) {\r\n            node.outputData = await this.processWorker(node);\r\n        }\r\n\r\n        this.unlock(node);\r\n        return node.outputData;\r\n    }\r\n\r\n    private async forwardProcess(node: NodeData) {\r\n        if (this.state === State.ABORT)\r\n            return null;\r\n\r\n        return await Promise.all(Object.keys(node.outputs).map(async (key) => {\r\n            const output = node.outputs[key];\r\n            \r\n            return await Promise.all(output.connections.map(async (c) => {\r\n                const nextNode = (this.data as Data).nodes[c.node];\r\n\r\n                await this.processNode(nextNode as EngineNode);\r\n                await this.forwardProcess(nextNode);\r\n            }));\r\n        }));\r\n    }\r\n\r\n    copy(data: Data) {\r\n        data = Object.assign({}, data);\r\n        data.nodes = Object.assign({}, data.nodes);\r\n        \r\n        Object.keys(data.nodes).forEach(key => {\r\n            data.nodes[key] = Object.assign({}, data.nodes[key])\r\n        });\r\n        return data;\r\n    }\r\n\r\n    async validate(data: Data) {\r\n        const checking = Validator.validate(this.id, data);\r\n        const recursion = new Recursion(data.nodes);\r\n\r\n        if (!checking.success)\r\n            return await this.throwError(checking.msg);  \r\n        \r\n        const recurrentNode = recursion.detect();\r\n\r\n        if (recurrentNode)\r\n            return await this.throwError('Recursion detected', recurrentNode);      \r\n         \r\n        return true;\r\n    }\r\n\r\n    private async processStartNode(id: string | number | null) {\r\n        if (!id) return;\r\n\r\n        let startNode = (this.data as Data).nodes[id];\r\n\r\n        if (!startNode)\r\n            return await this.throwError('Node with such id not found');   \r\n        \r\n        await this.processNode(startNode as EngineNode);\r\n        await this.forwardProcess(startNode);\r\n    }\r\n\r\n    private async processUnreachable() {\r\n        const data = this.data as Data;\r\n\r\n        for (let i in data.nodes) { // process nodes that have not been reached\r\n            const node = data.nodes[i] as EngineNode;\r\n\r\n            if (typeof node.outputData === 'undefined') {\r\n                await this.processNode(node);\r\n                await this.forwardProcess(node);\r\n            }\r\n        }\r\n    }\r\n\r\n    async process<T extends unknown[]>(data: Data, startId: number | string | null = null, ...args: T) {\r\n        if (!this.processStart()) return;\r\n        if (!this.validate(data)) return;    \r\n        \r\n        this.data = this.copy(data);\r\n        this.args = args;\r\n        \r\n        await this.processStartNode(startId);\r\n        await this.processUnreachable();\r\n        \r\n        return this.processDone()?'success':'aborted';\r\n    }\r\n}","import { Component } from './component';\r\nimport { Connection } from './connection';\r\nimport { Control } from './control';\r\nimport { Emitter } from './core/emitter';\r\nimport { IO } from './io';\r\nimport { Input } from './input';\r\nimport { Node } from './node';\r\nimport { NodeEditor } from './editor';\r\nimport { Output } from './output';\r\nimport { Socket } from './socket';\r\nimport { Engine, Recursion } from './engine/index';\r\n\r\nexport { Engine, Recursion } from './engine/index';\r\nexport { Component } from './component';\r\nexport { Control } from './control';\r\nexport { Connection } from './connection';\r\nexport { Emitter } from './core/emitter';\r\nexport { Input } from './input';\r\nexport { IO } from './io';\r\nexport { Node } from './node';\r\nexport { NodeEditor } from './editor';\r\nexport { Output } from './output';\r\nexport { Socket } from './socket';\r\n\r\nexport default {\r\n    Engine,\r\n    Recursion,\r\n    Component,\r\n    Control,\r\n    Connection,\r\n    Emitter,\r\n    Input,\r\n    IO,\r\n    Node,\r\n    NodeEditor,\r\n    Output,\r\n    Socket\r\n}"],"names":["Component","name","Node","Map","id","incrementId","list","item","prop","has","key","Error","this","set","control","_add","controls","parent","input","inputs","removeConnections","node","output","outputs","values","reduce","arr","io","connections","reduceIO","Array","from","obj","toJSON","data","position","latestId","json","x","y","Math","max","ComponentWorker","builder","build","Connection","addConnection","removeConnection","Control","constructor","TypeError","getNode","Emitter","events","handlers","names","handler","split","forEach","_this","push","params","r","e","isArray","IO","socket","multiConns","multipleConnections","connection","splice","indexOf","Input","title","length","hasConnection","map","c","Validator","isValidId","nodes","Object","test","id1","id2","msg","isValidData","success","Boolean","join","Context","plugins","components","plugin","options","install","component","trigger","listenWindow","event","window","addEventListener","removeEventListener","Events","warn","console","error","componentregister","destroy","Drag","el","onTranslate","_x","_y","_e","onStart","onDrag","pointerStart","style","touchAction","down","bind","stopPropagation","pageX","pageY","destroyMove","move","destroyUp","up","preventDefault","delta","zoom","getBoundingClientRect","width","offsetWidth","Zoom","container","intensity","onzoom","wheel","dblclick","end","destroyCancel","rect","wheelDelta","deltaY","ox","left","clientX","oy","top","clientY","touches","pointers","x1","y1","x2","y2","cx","cy","distance","sqrt","pow","p","pointerId","translating","previous","filter","Area","emitter","k","document","createElement","transformOrigin","_zoom","onZoom","_drag","on","pointermove","update","t","transform","mouse","_startPosition","dx","dy","translate","source","d","appendChild","removeChild","ConnectionView","inputNode","outputNode","zIndex","points","getPoints","getSocketPosition","ControlView","SocketView","type","offsetLeft","offsetTop","offsetHeight","NodeView","onSelect","bindSocket","bindControl","ios","sockets","s","includes","_this2","clearSockets","get","getPosition","payload","accumulate","ctrlKey","prev","EditorView","overflow","click","view","resize","updateConnections","area","nodeView","viewInput","viewOutput","connView","getConnections","conn","parentElement","clientWidth","height","clientHeight","target","Selected","contains","callback","EditorEvents","nodecreate","nodecreated","noderemove","noderemoved","connectioncreate","connectioncreated","connectionremove","connectionremoved","translatenode","nodetranslate","nodetranslated","nodedraged","selectnode","multiselectnode","nodeselect","nodeselected","rendernode","rendersocket","rendercontrol","renderconnection","updateconnection","keydown","keyup","translated","zoomed","mousemove","contextmenu","process","clear","NodeEditor","setAttribute","selectNode","selected","each","n","addNode","removeNode","connectTo","remove","add","editor","_this3","checking","validate","silent","beforeImport","Promise","all","keys","_this4","getComponent","fromJSON","jsonNode","jsonConnection","nodeId","targetOutput","targetInput","connect","afterImport","Output","compatibleWith","some","Socket","compatible","Recursion","acc","nodesData","b","inputNodes","inters","array1","array2","value","intersect","l","inter","findSelf","extractInputNodes","nodesArr","State","EngineEvents","Engine","engine","register","message","abort","processDone","state","onAbort","ret","res","unlockPool","busy","outputData","a","conns","prevNode","processNode","connData","extractInputData","inputData","worker","args","lock","processWorker","unlock","nextNode","forwardProcess","assign","recursion","throwError","recurrentNode","detect","startNode","i","startId","processStart","copy","processStartNode","processUnreachable"],"mappings":"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"}